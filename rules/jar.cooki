// @import "java" => javaRule

import javaRule.{ JavaDepResult, JavaBytecodeResult, jarCmd }

trait JarResult extends JavaDepResult with TargetResult {
  def jarPath: Path
}
case class JarResultImpl(jarPath: Path) extends JarResult {
  override def cp: List[String] = jarPath.path :: Nil
}
object JarResult {
  def apply(jarPath: Path) = JarResultImpl(jarPath)
}

def jar(jarName: String, deps: List[String], mainClass: String = null, res: List[(Path, String)] = Nil)
       (implicit context: Context) {
  val depTargetRefs = refs(deps)
  require(depTargetRefs.forall(_.isTarget), "deps should be target_refs")

  defineTarget[JarResult](
    name = jarName,
    resultFn = { t =>
      JarResult(t.buildDir / jarName)
    },
    buildCmd = { t =>
      val mkdirCmd = List("mkdir", "-p", "classes")
      val javaBytecodeResults = JavaBytecodeResult.getAllBytecodeResults(t.depTargets)
      val cpClassesCmds =
        (javaBytecodeResults map { r => r.bytecodeDir.list.map(_.path) } flatten) map { d =>
          "cp" :: "-rf" :: d :: "classes/" :: Nil
        }
      val jarCmdOp = if (mainClass == null) {
        jarCmd :: "cf" :: jarName :: "-C" :: "classes" :: "." :: Nil
      } else {
        jarCmd :: "cfe" :: jarName :: mainClass :: "-C" :: "classes" :: "." :: Nil
      }
      val mkdirCmds = res map { case (s, d) =>
        "mkdir" :: "-p" :: s"classes/$d"
      }
      val copyCmds = res map { case (s, d) =>
        "cp" :: "-r" :: s.path :: s"classes/$d"
      }
      runBuildCmdInTargetDir(t)(
        mkdirCmd :: cpClassesCmds ::: mkdirCmds ::: copyCmds ::: jarCmdOp :: Nil: _*
      )
    },
    inputMetaFn = { t =>
      stringToMeta("mainClass", mainClass)
    },
    deps = depTargetRefs
  )(context)
}
