def scala_lib(name, srcs, deps = []) {
  srcs = labels(srcs)
  srcTargets = [s for s in srcs if s.isTargetLabel]
  srcs = [s for s in srcs if s.isFileLabel]

  deps = labels(deps)
  deps += label("//lib/scala_library.jar")
  lib   = [d.file for d in deps if d.isFileLabel]
  depTargets = [d for d in deps if d.isTargetLabel]
  cp = []

  genrule(
    name = name,
    outputType = "java_class",
    inputs = srcs,
    deps = depTargets ++ srcTargets,
    preBuild = lambda(t) {
      scalafiles = srcs
      for (st <- srcTargets) {
        if (st.outputType() != "scala_source") {
          error("scala_lib.srcs should only contains target which has outputType='scala_source': " + st.name)
        }
        scalafiles ++= glob("**/*.scala", baseDir = st.outputDir)
      }
      scalafiles = [i.file for i in scalafiles]

      for (d <- depTargets) {
        if (d.outputType() == "java_class") {
          cp += d.outputDir
          cp ++= d.value("cp")
          lib ++= d.value("lib")
        } else {
          error("scala_lib(\"" + t.name + "\").deps should only contains target which has outputType='java_class': " + d.name)
        }
      }

      [
        "SOURCES=(%s)" % [ scalafiles.join(" ") ],
        "CP=\"%s\"" % [ (cp ++ lib).join(":") ],
	"SCALAC=$SCALA_HOME/bin/scalac",
        "$SCALAC -d $OUTPUT_DIR -cp .:$CP ${SOURCES[*]}",
      ]
    },
    postBuild = lambda(t) {
      t.setValues({
        cp: cp,
        lib: lib
      })
    }
  )
}

def scala_test(name, testClasses, deps, res) {

  deps = labels(deps)
  lib   = [d.file for d in deps if d.isFileLabel]
  depTargets = [d for d in deps if d.isTargetLabel]
  cp = [ label("//lib/scalatest.jar").file ]
  mkdirForRes = ["mkdir -p " + r.get(1) for r in res]
  cpRes = ["cp -r " + label(r.get(0)).file + " " + r.get(1) for r in res]

  genrule(
    name = name,
    outputType = "",
    deps = depTargets,
    cmds = [ "" ],
    preRun = lambda(t) {
      for (d <- depTargets) {
        cp += d.outputDir
        cp ++= d.value("cp")
        lib ++= d.value("lib")
      }

      [
        "CP=%s" % [ (cp ++ lib).join(":") ],
      ] ++ mkdirForRes ++ cpRes ++ [
	"SCALA=$SCALA_HOME/bin/scala",
        "$SCALA -Dfile.encoding=UTF8 -cp .:$CP org.scalatest.tools.Runner -R . -o -s %s" % [testClasses.join(" ")],
      ]
    },
    errorWhenNoOutput = false,
  )
}
