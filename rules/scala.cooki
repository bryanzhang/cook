// @val java = "java"

import java.{ JavaDepResult, JavaBytecodeResult }

trait ScalaSourceResult extends TargetResult {
  def scalaSrcs: List[Path]
}
case class ScalaSourceResultImpl(scalaSrcs: List[Path]) extends ScalaSourceResult

object ScalaSourceResult {

  def apply(dir: Directory) = {
    ScalaSourceResultImpl(glob(includes = List("**/*\\.scala"), baseDir = dir))
  }
}

def scala_lib(name: String, srcs: List[String], deps: List[String] = Nil)(implicit context: Context) {
  val (inputTargetRefs, inputRefs) = refs(srcs) partition { _.isTarget }
  val (depTargetRefs, cpRefs) = refs(deps) partition { _.isTarget }
  val cpPath = cpRefs collect {
    case f: FileRef => f.toPath
    case d: DirRef => d.toDir
  }
  val inCp = cpPath map { _.path }
  val inputs = inputRefs collect {
    case f: FileRef => f.toPath
    case d: DirRef => d.toDir
  }

  defineTarget[JavaBytecodeResult](
    name = name,
    resultFn = { t =>
      val depTargets = collectTargets(t.depTargets, depTargetRefs)
      JavaBytecodeResult(t.buildDir, inCp, depTargets.map(_.result))
    },
    buildCmd = { t =>
      val inputTargets = collectTargets(t.depTargets, inputTargetRefs)
      val depTargets = collectTargets(t.depTargets, depTargetRefs)
      val sources = inputs ::: (inputTargets map { _.result.as[ScalaSourceResult].scalaSrcs } flatten)
      val cp = JavaDepResult.buildCp(inCp, depTargets.map(_.result))
      // build scala sources with cp
      val cmd = List("scalac", "-encoding", "UTF-8", "-d", t.buildDir.path, "-classpath", cp.mkString(":")) ::: sources.map(_.path)
      handleBuildCmd(t) { logger =>
        import scala.sys.process._
        cmd !! logger
      }
    },
    inputMetaFn = { t =>
      filesToMeta("scala", inputs) + filesToMeta("cp", cpPath)
    },
    deps = inputTargetRefs ::: depTargetRefs
  )(context)
}
