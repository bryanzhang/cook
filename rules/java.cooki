def java_lib(name, srcs, deps = []) {
  inputs = labels(srcs)

  deps = labels(deps)
  cp   = [d for d in deps if d.isFileLabel]
  deps = [d for d in deps if d.isTargetLabel]

  cp = [i.file for i in cp] ++ [i.outputDir for i in deps]

  genrule(
    name = name,
    inputs = inputs,
    deps = deps,
    cmds = [
      "CP=(${ALL_DEP_OUTPUT_DIRS[*]} %s)" % [cp.join(" ")],
      "CP=$(printf :%s ${CP[*]})",
      "CP=${CP:1}",
      "[[ \"$CP\" == \"\" ]] || ADD_CP=\"-cp $CP\"",
      "javac -d $OUTPUT_DIR $ADD_CP ${INPUTS[*]}",
    ]
  )
}

def jar(name, deps = [], libs = [], mainClass = null) {
  deps = labels(deps)
  libs = labels(libs)

  unjarCmds = ["jar xf \"%s\"" % [lib.file] for lib in libs]


  if (mainClass == null) {
    genrule(
      name = name + ".jar",
      deps = deps,
      cmds = [
        "rm -fr classes",
        "mkdir classes",
        "for d in ${DEP_OUTPUT_DIRS[*]}; do cp -r \"$d/\"* classes/; done",
        "jar cf $NAME -C classes ."
      ]
    )

    genrule(
      name = name + ".all.jar",
      deps = deps,
      cmds = [
        "rm -fr classes",
        "mkdir classes",
        "for d in ${ALL_DEP_OUTPUT_DIRS[*]}; do cp -r \"$d/\"* classes/; done",
        "cd classes/",
      ] ++ unjarCmds ++ [
        "cd $OUTPUT_DIR",
        "jar cf $NAME -C classes .",
      ],
    )
  } else {
    genrule(
      name = name + ".jar",
      deps = deps,
      cmds = [
        "rm -fr classes",
        "mkdir classes",
        "for d in ${DEP_OUTPUT_DIRS[*]}; do cp -r \"$d/\"* classes/; done",
        "jar cfe $NAME %s -C classes ." % [ mainClass ]
      ]
    )

    genrule(
      name = name + ".all.jar",
      deps = deps,
      cmds = [
        "rm -fr classes",
        "mkdir classes",
        "for d in ${ALL_DEP_OUTPUT_DIRS[*]}; do cp -r \"$d/\"* classes/; done",
        "cd classes/",
      ] ++ unjarCmds ++ [
        "cd $OUTPUT_DIR",
        "jar cfe $NAME %s -C classes ." % [ mainClass ]
      ],
    )
  }
}
