private val conf = configWithDefault("""
  java {
    javaCmd = ${JAVA_HOME}/bin/java
    jarCmd = ${JAVA_HOME}/bin/jar
  }
""")

val javaCmd = conf.getString("java.javaCmd")
val jarCmd = conf.getString("java.jarCmd")

trait JavaDepResult extends TargetResult {
  def cp: List[String]
}
case class JavaDepResultImpl(cp: List[String]) extends JavaDepResult
object JavaDepResult {
  def apply(cp: List[String]) = JavaDepResultImpl(cp)

  def buildCp(cp: List[String], depResults: List[TargetResult]): List[String] = {
    import scala.collection.immutable.ListSet
    val mergedCp = ListSet.newBuilder[String]
    mergedCp ++= cp

    depResults collect {
      case r: JavaDepResult => r
    } foreach { r =>
      mergedCp ++= r.cp
    }

    mergedCp.result.toList
  }
}

trait JavaBytecodeResult extends JavaDepResult with TargetResult {
  def bytecodeDir: Directory
  def inCp: List[String]
}
case class JavaBytecodeResultImpl(bytecodeDir: Directory, inCp: List[String]) extends JavaBytecodeResult {
  override def cp: List[String] = bytecodeDir.path :: inCp
}

object JavaBytecodeResult {

  def apply(bytecodeDir: Directory, cp: List[String], depResults: List[TargetResult] = Nil) = {
    JavaBytecodeResultImpl(bytecodeDir, JavaDepResult.buildCp(cp, depResults))
  }

  def getAllBytecodeResults(targets: Seq[Target[TargetResult]]): List[JavaBytecodeResult] = {
    import scala.collection.mutable
    val results = mutable.ArrayBuffer[JavaBytecodeResult]()
    val known = mutable.Set[String]()
    val pending = mutable.Stack[Target[TargetResult]]()

    known ++= targets.map(_.refName)
    pending pushAll targets
    while (pending.nonEmpty) {
      val t = pending.pop
      if (t.result.isInstanceOf[JavaBytecodeResult]) {
        results += t.result.as[JavaBytecodeResult]
      }
      val deps = t.depTargets filterNot { d => known.contains(d.refName) }
      known ++= deps.map(_.refName)
      pending pushAll deps
    }

    results toList
  }
}

trait JavaSourceResult extends TargetResult {
  def javaSrcs: List[Path]
}
case class JavaSourceResultImpl(javaSrcs: List[Path]) extends JavaSourceResult

object JavaSourceResult {

  def apply(dir: Directory) = {
    JavaSourceResultImpl(glob(includes = List("**/*\\.java"), baseDir = dir))
  }
}

def java_lib(name: String, srcs: List[String] = Nil, deps: List[String] = Nil)(implicit context: Context) {
  val (inputTargetRefs, inputRefs) = refs(srcs) partition { _.isTarget }
  val (depTargetRefs, cpRefs) = refs(deps) partition { _.isTarget }
  val cpPath = cpRefs collect {
    case f: FileRef => f.toPath
    case d: DirRef => d.toDir
  }
  val inCp = cpPath map { _.path }
  val inputs = inputRefs collect {
    case f: FileRef => f.toPath
    case d: DirRef => d.toDir
  }

  defineTarget[JavaBytecodeResult](
    name = name,
    resultFn = { t =>
      val depTargets = collectTargets(t.depTargets, depTargetRefs)
      JavaBytecodeResult(t.buildDir, inCp, depTargets.map(_.result))
    },
    buildCmd = if (srcs.isEmpty) {
      EmptyBuildCmd()
    } else { t =>
      val inputTargets = collectTargets(t.depTargets, inputTargetRefs)
      val depTargets = collectTargets(t.depTargets, depTargetRefs)
      val sources = inputs ::: (inputTargets map { _.result.as[JavaSourceResult].javaSrcs } flatten)
      val cp = JavaDepResult.buildCp(inCp, depTargets.map(_.result))
      // build java sources with cp
      val cmd = List("javac", "-encoding", "UTF-8", "-d", t.buildDir.path, "-cp", cp.mkString(":")) ::: sources.map(_.path)
      handleBuildCmd(t) { logger =>
        import scala.sys.process._
        cmd !! logger
      }
    },
    inputMetaFn = { t =>
      filesToMeta("java", inputs) + filesToMeta("cp", cpPath)
    },
    deps = inputTargetRefs ::: depTargetRefs
  )(context)
}

def java_bin(name: String, mainClass: String, deps: List[String], jvmOption: List[String] = Nil)(implicit context: Context) {
  val (depTargetRefs, cpRefs) = refs(deps) partition { _.isTarget }
  val cpPath = cpRefs collect {
    case f: FileRef => f.toPath
    case d: DirRef => d.toDir
  }
  val inCp = cpPath map { _.path }

  defineTarget[UnitResult](
    name = name,
    resultFn = UnitResultFn(),
    buildCmd = EmptyBuildCmd(),
    runCmd = Option({ (t, args) =>
      val depTargets = collectTargets(t.depTargets, depTargetRefs)
      val cp = JavaDepResult.buildCp(inCp, depTargets.map(_.result))
      val cmd = "java" :: jvmOption ::: List("-cp", cp.mkString(":"), mainClass) ::: args
      import scala.sys.process._
      cmd!
    }),
    inputMetaFn = { t =>
      filesToMeta("cp", cpPath)
    },
    deps = depTargetRefs
  )
}
