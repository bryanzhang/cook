def java_lib(name, srcs = [], deps = []) {
  srcs = labels(srcs)
  srcTargets = [s for s in srcs if s.isTargetLabel]
  srcs = [s for s in srcs if s.isFileLabel]

  deps = labels(deps)
  libs = [d for d in deps if d.isFileLabel]
  lib  = [d.file for d in libs]
  depTargets = [d for d in deps if d.isTargetLabel]
  cp = []

  genrule(
    name = name,
    outputType = "java_class",
    inputs = srcs ++ libs,
    deps = depTargets ++ srcTargets,
    preBuild = lambda(t) {
      javafiles = srcs
      for (st <- srcTargets) {
        if (st.outputType() != "java_source") {
          error("java_lib.srcs should only contains target which has outputType='java_source': " + st.name)
        }

        javafiles ++= glob("**/*.java", baseDir = st.outputDir)
      }
      javafiles = [i.file for i in javafiles]

      for (d <- depTargets) {
        if (d.outputType() == "java_class") {
          cp += d.outputDir
          cp ++= d.value("cp")
          lib ++= d.value("lib")
        } else {
          error("java_lib(\"" + t.name + "\").deps should only contains target which has outputType='java_class': " + d.name)
        }
      }

      cp = cp.toSet()
      lib = lib.toSet()

      if (javafiles.nonEmpty) {
        [
          "SOURCES=(%s)" % [ javafiles.join(" ") ],
          "CP=\"%s\"" % [ (cp ++ lib).join(":") ],
          "javac -encoding UTF-8 -d $OUTPUT_DIR -cp .:$CP ${SOURCES[*]}"
        ]
      } else {
        []
      }
    },
    postBuild = lambda(t) {
      t.setValues({
        cp: cp.toSet(),
        lib: lib.toSet()
      })
    },
    errorWhenNoOutput = srcs.nonEmpty,
  )
}

def jar(name, java_libs = [], mainClass = null) {
  targets = labels(java_libs)

  for (t <- targets) {
    if (!t.isTargetLabel) {
      error("target jar(\"%s\").java_libs should only contains targets")
    }
  }

  if (mainClass == null) {
    jarCmd = "jar cf $NAME -C classes ."
  } else {
    jarCmd = "jar cfe $NAME %s -C classes ." % [ mainClass ]
  }

  genrule(
    name = name + ".jar",
    outputType = "java_jar",
    deps = targets,
    preBuild = lambda(t) {
      for (t <- targets) {
        if (!t.isTargetLabel) {
          error("target jar(\"%s\").java_libs should only contains target has outputType=java_class")
        }
      }

      classDirs = [ t.outputDir for t in targets ]
      [
        "rm -fr classes",
        "mkdir classes",
        "CLASSES_DIRS=(%s)" % [ classDirs.join(" ") ],
        "for d in ${CLASSES_DIRS[*]}; do cp -r \"$d/\"* classes/; done",
        jarCmd
      ]
    },
  )

  genrule(
    name = name + ".all.jar",
    outputType = "java_jar",
    deps = targets,
    preBuild = lambda(t) {
      for (t <- targets) {
        if (!t.isTargetLabel) {
          error("target jar(\"%s\").java_libs should only contains target has outputType=java_class")
        }
      }

      classDirs = []
      for (t <- targets) {
        classDirs += t.outputDir
        classDirs ++= t.value("cp")
      }

      [
        "rm -fr classes",
        "mkdir classes",
        "CLASSES_DIRS=(%s)" % [ classDirs.join(" ") ],
        "for d in ${CLASSES_DIRS[*]}; do cp -r \"$d/\"* classes/; done",
        jarCmd
      ]
    },
  )
}
