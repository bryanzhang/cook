// This file contains the PEG grammar definition that Mouse uses to generate our parser.
// http://en.wikipedia.org/wiki/Parsing_expression_grammar
//
// CookConfig grammar

CookConfig      = Spacing Statement* EOT                                  {cookConfig} ;

Statement       = ( FuncStatement / FuncDef )                             {statement} ;

FuncCall        = Identifier LPAR ArgList? RPAR                           {funcCall} ;

Assginment      = !Keyword Identifier EQU Expr                            {assginment} ;

Expr            = ExprItem ( Operation ExprItem )*                        {expr} ;

ExprItem        = SimpleExprItem ( SelectorSuffix )*                      {exprItem} ;

SimpleExprItem  = ( IntegerConstant
                  / StringLiteral
                  / FuncCall
                  / Identifier ![(]
                  / LBRK ExprList? RBRK
                  / LPAR Expr RPAR
                  )                                                       {simpleExprItem} ;

ExprList        = Expr ( COMMA Expr )* COMMA?                             {exprList} ;

ArgList         = Arg ( COMMA Arg )* COMMA?                               {argList} ;

Arg             = ( !Keyword Identifier EQU Expr / Expr )                 {arg} ;

ArgDefList      = ArgDef ( COMMA ArgDef )* COMMA?                         {argDefList} ;

ArgDef          = !Keyword Identifier ( EQU Expr )?                       {argDef};

SelectorSuffix  = DOT ( Identifier ![(] / FuncCall )                      {selectorSuffix} ;

FuncDef         = DEF !Keyword Identifier LPAR ArgDefList? RPAR LWING
                  FuncStatement* ReturnStatement? RWING                   {funcDef} ;

FuncStatement   = ( FuncCall / Assginment )                               {funcStatement} ;

ReturnStatement = RETURN Expr                                             {returnStatement} ;


//-----------------------------------------------------------------------//
//  Lexical elements                                                     //
//-----------------------------------------------------------------------//

//-------------------------------------------------------------------------
//  Keywords
//-------------------------------------------------------------------------

Keyword  = ( DEF / RETURN / INCLUDE / SUBCLUDE / GLOB / PATH / ECHO / GENRULE ) ;

DEF      = "def"      ! IdChar Spacing ;
RETURN   = "return"   ! IdChar Spacing ;

INCLUDE  = "include"  ! IdChar Spacing ;
SUBCLUDE = "subclude" ! IdChar Spacing ;
GLOB     = "glob"     ! IdChar Spacing ;
PATH     = "path"     ! IdChar Spacing ;
ECHO     = "echo"     ! IdChar Spacing ;

GENRULE  = "genrule"  ! IdChar Spacing ;

//-------------------------------------------------------------------------
//  Operation
//-------------------------------------------------------------------------

Operation = ( PLUS / MINUS / INC / STAR / DIV / MOD );

//-------------------------------------------------------------------------
//  Constant
//-------------------------------------------------------------------------

IntegerConstant
    = ( DecimalConstant
      / HexConstant
      / OctalConstant
      )
    IntegerSuffix? Spacing {integerConstant}
    ;

DecimalConstant = [1-9][0-9]* {decimalConstant} ;

OctalConstant   = "0"[0-7]* {octalConstant} ;

HexConstant     = HexPrefix HexDigit+ {hexConstant} ;

HexPrefix       = "0x" / "0X" ;

HexDigit        = [a-f] / [A-F] / [0-9] ;

IntegerSuffix
    = [uU] Lsuffix?
    / Lsuffix [uU]?
    ;

Lsuffix
    = "ll"
    / "LL"
    / [lL]
    ;


//-------------------------------------------------------------------------
//  Identifier
//-------------------------------------------------------------------------

Identifier = IdNondigit IdChar* Spacing {identifier} ;
IdNondigit = [a-z] / [A-Z] ;
IdChar = [a-z] / [A-Z] / [0-9] / [_] ;


//-------------------------------------------------------------------------
//  Spacing
//-------------------------------------------------------------------------

Spacing = ( WhiteSpace / LineComment )* ;

WhiteSpace  = [ \n\r\t\u000B\u000C] ;

LineComment = "#" (!"\n" _)* EOL ;


//-------------------------------------------------------------------------
//  String Literals
//-------------------------------------------------------------------------

StringLiteral = ["] StringChar* ["] Spacing {stringLiteral} ;
StringChar = ( Escape / ![\"\n\\] _ )       {stringChar}    ;

Escape = SimpleEscape                       {escape}        ;
SimpleEscape = "\\" ['\"\\bfnrt]            {simpleEscape}  ;


//-------------------------------------------------------------------------
//  Punctuators
//-------------------------------------------------------------------------
LBRK       =  "["         Spacing ;
RBRK       =  "]"         Spacing ;
LPAR       =  "("         Spacing ;
RPAR       =  ")"         Spacing ;
LWING      =  "{"         Spacing ;
RWING      =  "}"         Spacing ;


PLUS       =  "+"  ![+=]  Spacing ;
MINUS      =  "-"  ![\-=>]Spacing ;
INC        =  "++"        Spacing ;
STAR       =  "*"         Spacing ;
DIV        =  "/"  ![=]   Spacing ;
MOD        =  "%"  ![=>]  Spacing ;


DOT        =  "."         Spacing ;
EQU        =  "="  !"="   Spacing ;
COMMA      =  ","         Spacing ;

EOL        =  [\r\n] / !_ ;
EOT        =  !_    ;
