// This file contains the PEG grammar definition that Mouse uses to generate our parser.
// http://en.wikipedia.org/wiki/Parsing_expression_grammar
//
// RuleConfig grammar

RuleConfig = Spacing RuleRule* EOT {ruleConfig} ;

RuleRule = DEF RuleName LPAR ParamList RPAR LWING RuleBlock RWING {ruleRule} ;

RuleName = Identifier {ruleName} ;

// TODO(timgreen):
RuleBlock = Spacing {ruleBlock} ;

ParamList = Param ( COMMA Param )* COMMA? Spacing {&paramList} ;
Param = ParamName COLON TypeName ( EQU DefaultValue )? {param} ;

ParamName = Identifier {paramName} ;
TypeName = ( STRING / INT / STRINGLIST / INTLIST) Spacing {typeName} ;
DefaultValue =
    (
    StringValue
    / ListStringValue
    / NumberValue
    / ListNumberValue
    ) {defaultValue} ;

StringValue = StringLiteral Spacing {stringValue} ;
NumberValue = IntegerConstant Spacing {numberValue} ;
ListStringValue = LBRK StringValue ( COMMA StringValue )* COMMA? RBRK Spacing {listStringValue} ;
ListNumberValue = LBRK NumberValue ( COMMA NumberValue )* COMMA? RBRK Spacing {listNumberValue} ;



//-----------------------------------------------------------------------//
//  Lexical elements                                                     //
//-----------------------------------------------------------------------//

//-------------------------------------------------------------------------
//  Keywords
//-------------------------------------------------------------------------

DEF        = "def"       !IdChar Spacing ;

STRING     = "string"    !( "[" / IdChar ) Spacing ;
INT        = "int"       !( "[" / IdChar ) Spacing ;
STRINGLIST = "string[]"  !IdChar Spacing ;
INTLIST    = "int[]"     !IdChar Spacing ;


//-------------------------------------------------------------------------
//  Constant
//-------------------------------------------------------------------------

IntegerConstant
    = ( DecimalConstant
      / HexConstant
      / OctalConstant
      )
    IntegerSuffix? Spacing {integerConstant}
    ;

DecimalConstant = [1-9][0-9]* {decimalConstant} ;

OctalConstant   = "0"[0-7]* {octalConstant} ;

HexConstant     = HexPrefix HexDigit+ {hexConstant} ;

HexPrefix       = "0x" / "0X" ;

HexDigit        = [a-f] / [A-F] / [0-9] ;

IntegerSuffix
    = [uU] Lsuffix?
    / Lsuffix [uU]?
    ;

Lsuffix
    = "ll"
    / "LL"
    / [lL]
    ;


//-------------------------------------------------------------------------
//  Identifier
//-------------------------------------------------------------------------

Identifier = IdNondigit IdChar* Spacing {identifier} ;
IdNondigit = [a-z] / [A-Z] ;
IdChar = [a-z] / [A-Z] / [0-9] / [_] ;


//-------------------------------------------------------------------------
//  Spacing
//-------------------------------------------------------------------------

Spacing = ( WhiteSpace / LineComment )* ;

WhiteSpace  = [ \n\r\t\u000B\u000C] ;

LineComment = "#" (!"\n" _)* EOL ;


//-------------------------------------------------------------------------
//  String Literals
//-------------------------------------------------------------------------

StringLiteral = ["] StringChar* ["] Spacing {stringLiteral} ;
StringChar = Escape / ![\"\n\\] _ ;

Escape = SimpleEscape ;
SimpleEscape = "\\" ['\"?\\abfnrtv] ;


//-------------------------------------------------------------------------
//  Punctuators
//-------------------------------------------------------------------------
LBRK       =  "["         Spacing ;
RBRK       =  "]"         Spacing ;
LPAR       =  "("         Spacing ;
RPAR       =  ")"         Spacing ;
LWING      =  "{"         Spacing ;
RWING      =  "}"         Spacing ;

EQU        =  "="  !"="   Spacing ;
COMMA      =  ","         Spacing ;
COLON      =  ":"  ![>]   Spacing ;

EOL        =  [\r\n] / !_ ;
EOT        =  !_    ;
