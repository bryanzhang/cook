// This file contains the PEG grammar definition that Mouse uses to generate our parser.
// http://en.wikipedia.org/wiki/Parsing_expression_grammar
//
// CookConfig grammar

CookConfig      = Spacing Statement* EOT                              {cookConfig} ;

Statement       = ( SingleStatement SEMI )* SingleStatement SEMI? EOL {statement} ;

SingleStatement = ( FuncCall / Assginment / FunctionDef )             {singleStatement} ;

FuncCall        = Identifier FuncCallSuffix                           {funcCall} ;

Assginment      = Identifier EQU Expr                                 {assginment} ;

Expr            = ( ExprItem ( PLUS / MINUS ) )* ExprItem             {expr} ;

ExprItem        = SimpleExprItem ( SelectorSuffix )*                  {exprItem} ;

SimpleExprItem  = ( IntegerConstant
                  / StringLiteral ![.]
                  / Identifier ![.(]
                  / FuncCall
                  / LBRK ExprList? RBRK
                  / LPAR Expr RPAR
                  )                                                   {simpleExprItem} ;

ExprList        = ( Expr COMMA )* Expr COMMA?                         {exprList} ;

FuncCallSuffix  = LPAR ArgList? RPAR                                  {functionCallSuffix} ;

ArgList         = ( Arg COMMA )* Arg COMMA?                           {argList} ;

Arg             = ( Identifier EQU Expr / Expr )                      {arg} ;

SelectorSuffix  = DOT ( Identifier / Identifier FuncCallSuffix )      {selectorSuffix} ;

FunctionDef     = DEF Identifier LPAR ArgList RPAR LWING
                  ( FuncCall / Assginment )* Return? RWING EOL        {functionDef} ;

Return          = RETURN Expr                                         {invokeReturn} ;


//-----------------------------------------------------------------------//
//  Lexical elements                                                     //
//-----------------------------------------------------------------------//

//-------------------------------------------------------------------------
//  Keywords
//-------------------------------------------------------------------------

DEF      = "def"      ! IdChar Spacing ;
RETURN   = "return"   ! IdChar Spacing ;

INCLUDE  = "include"  ! IdChar Spacing ;
SUBCLUDE = "subclude" ! IdChar Spacing ;

RULE     = "rule"     ! IdChar Spacing ;

//-------------------------------------------------------------------------
//  Constant
//-------------------------------------------------------------------------

IntegerConstant
    = ( DecimalConstant
      / HexConstant
      / OctalConstant
      )
    IntegerSuffix? Spacing {integerConstant}
    ;

DecimalConstant = [1-9][0-9]* {decimalConstant} ;

OctalConstant   = "0"[0-7]* {octalConstant} ;

HexConstant     = HexPrefix HexDigit+ {hexConstant} ;

HexPrefix       = "0x" / "0X" ;

HexDigit        = [a-f] / [A-F] / [0-9] ;

IntegerSuffix
    = [uU] Lsuffix?
    / Lsuffix [uU]?
    ;

Lsuffix
    = "ll"
    / "LL"
    / [lL]
    ;


//-------------------------------------------------------------------------
//  Identifier
//-------------------------------------------------------------------------

Identifier = IdNondigit IdChar* Spacing {identifier} ;
IdNondigit = [a-z] / [A-Z] ;
IdChar = [a-z] / [A-Z] / [0-9] / [_] ;


//-------------------------------------------------------------------------
//  Spacing
//-------------------------------------------------------------------------

Spacing = ( WhiteSpace / LineComment )* ;

WhiteSpace  = [ \n\r\t\u000B\u000C] ;

LineComment = "#" (!"\n" _)* EOL ;


//-------------------------------------------------------------------------
//  String Literals
//-------------------------------------------------------------------------

StringLiteral = ["] StringChar* ["] Spacing {stringLiteral} ;
StringChar = Escape / ![\"\n\\] _ ;

Escape = SimpleEscape ;
SimpleEscape = "\\" ['\"?\\abfnrtv] ;


//-------------------------------------------------------------------------
//  Punctuators
//-------------------------------------------------------------------------
LBRK       =  "["         Spacing ;
RBRK       =  "]"         Spacing ;
LPAR       =  "("         Spacing ;
RPAR       =  ")"         Spacing ;
LWING      =  "{"         Spacing ;
RWING      =  "}"         Spacing ;


PLUS       =  "+"  ![+=]  Spacing ;
MINUS      =  "-"  ![\-=>]Spacing ;


DOT        =  "."         Spacing ;
EQU        =  "="  !"="   Spacing ;
COMMA      =  ","         Spacing ;
SEMI       =  ";"         Spacing ;

EOL        =  [\r\n] / !_ ;
EOT        =  !_    ;
